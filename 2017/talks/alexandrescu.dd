Ddoc

Macros:

DATE = May 6

TIME = 10:00

SPEAKER = Andrei Alexandrescu

SPEAKER_SHORT = alexandrescu

SPEAKER_URL = http://erdani.com

SPEAKER_PIC = http://erdani.com/media/2012-07-16%20Professional%20Photo%205.jpg

TALK_TITLE = Design by Introspection

TYPE = $(B Keynote)

SLIDES = $(SLIDES_YES)

VIDEO_URL_Y = https://youtu.be/HdzwvY8Mo-w

VIDEO_URL_A =

VIDEO = $(VIDEO_YES)

LEVEL = All

ABSTRACT =
$(P
Over the years, a few programming paradigms have been successful enough to enter the casual vocabulary of software engineers: procedural, imperative, object-oriented, functional, generic, declarative. There's a B-list, too, that includes paradigms such as logic, constraint-oriented, and symbolic.
)

$(P
The point is, there aren't very many of them altogether. Easy to imagine, then, the immensely humbling pressure one must feel when stumbling upon a way to think about writing code that is at the same time explosively productive and firmly removed from any of the paradigms considered canon.
)

$(P
This talk shares early experience with Design by Introspection, a proposed programming paradigm that has enough demonstrable results to be worth sharing. The tenets of Design by Introspection are:
)

$(UL
$(LI $(B The rule of optionality): Component primitives are almost entirely opt-in. A given component is required to implement only a modicum of primitives, and all others are optional. The component is free to implement any subset of the optional primitives.)

$(LI $(B The rule of introspection): A component user employs introspection on the component to implement its own functionality using the primitives offered by the component.)

$(LI $(B The rule of elastic composition): A component obtained by composing several other components offers capabilities in proportion with the capabilities offered by its individual components.)
)

$(P
These rules, and how to use them to build powerful software, are the topic of this talk.
)

BIO =
$(P Andrei Alexandrescu coined the colloquial term "modern C++" (adapted
from his award-winning book Modern C++ Design), used today to describe
a collection of important C++ styles and idioms. He is also the
coauthor (with Herb Sutter) of C++ Coding Standards and the author of
The D Programming Language book. With Walter Bright, Andrei
co-designed many important features of D and authored a large part of
D's standard library. His research on Machine Learning and Natural
Language Processing completes a broad spectrum of expertise. Andrei
holds a Ph.D. in Computer Science from the University of Washington and
a B.Sc. in Electrical Engineering from University "Politehnica"
Bucharest. He works with the D Language Foundation.
)